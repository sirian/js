import {ArrBuf, ArrBufTarget} from "../../src";

describe("ArrBuf.isEqual", () => {
    const x = new Uint8Array([
        0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x20, 0x65, 0x76, 0x65, 0x72, 0x79,
        0x62, 0x6f, 0x64, 0x79, 0x21, 0x20, 0xf0, 0x9f, 0x92, 0xa9, 0x20,
        0x20, 0x68, 0x61, 0x70, 0x70, 0x65, 0x6e, 0x73, 0x2e]);

    const copy = new Uint8Array([
        0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x20, 0x65, 0x76, 0x65, 0x72, 0x79,
        0x62, 0x6f, 0x64, 0x79, 0x21, 0x20, 0xf0, 0x9f, 0x92, 0xa9, 0x20,
        0x20, 0x68, 0x61, 0x70, 0x70, 0x65, 0x6e, 0x73, 0x2e]);

    const smaller = new Uint8Array([
        0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x20, 0x65, 0x76, 0x65, 0x72, 0x79,
        0x62, 0x6f, 0x64, 0x79, 0x21, 0x20, 0xf0, 0x9f, 0x92, 0xa9, 0x20,
        0x20, 0x73, 0x2e]);

    const sameLengthDifferentContent = new Uint8Array([
        0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x20, 0x65, 0x76, 0x65, 0x72, 0x79,
        0x62, 0x6f, 0x64, 0x7c, 0x25, 0x26, 0xf0, 0x9f, 0x92, 0xa9, 0x20,
        0x20, 0x68, 0x61, 0x70, 0x70, 0x65, 0x6e, 0x73, 0x2e]);

    const data: Array<[ArrBufTarget, ArrBufTarget, boolean]> = [
        [new Uint8Array(), new Uint8Array(), true],
        [new Uint8Array([1, 1]), new Uint16Array([257]), true],
        [x, x, true],
        [x, x.slice(0), true],
        [x, copy, true],
        [x, smaller, false],
        [x, sameLengthDifferentContent, false],
    ];

    test.each(data)("ArrBuf.isEqual(%p, %p) === %o", (buf1, buf2, expected) => {
        expect(ArrBuf.isEqual(buf1, buf2)).toBe(expected);
    });
});
